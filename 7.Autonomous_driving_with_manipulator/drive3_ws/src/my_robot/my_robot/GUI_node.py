# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import rclpy, subprocess, os, smtplib, pyudev
from rclpy.node import Node
from std_msgs.msg import String

from PyQt5 import QtCore, QtGui, QtWidgets
## 로그인 함수 ##
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QLabel, QDesktopWidget, QMessageBox, QDialog
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt,QBuffer, QIODevice, QTimer
from PyQt5 import QtCore, QtGui, QtWidgets
## 이메일 전송 ##
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
## ROS2 스레드 관리 ##
from PyQt5.QtCore import QThread, pyqtSignal
from rclpy.executors import MultiThreadedExecutor
## 카메라 이미지 토픽 ##
from sensor_msgs.msg import CompressedImage
import cv2
from PyQt5.QtGui import QImage, QPixmap
import numpy as np
import cv2.aruco as aruco


############################## ROS2 스레드 관리 #################################
class ROS2NodeThread(QThread):
    ros_message_signal = pyqtSignal(str)  # ROS2 데이터를 Qt로 전달하는 시그널
    ros_image_signal = pyqtSignal(QImage)  # 이미지를 전달할 시그널
    ros_local_image_signal = pyqtSignal(QImage)


    def __init__(self):
        super().__init__()
        self.node = None  # ROS2 노드를 저장할 변수
        self.executor = None
        self.running = True
        
        
        self.aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_5X5_100)
        self.aruco_params = aruco.DetectorParameters_create()

        # 카메라 행렬, 왜곡계수 (예시)
        self.camera_matrix = np.array([
            [1425.77372,    0.0,       765.863665],
            [   0.0,     1426.37774,  425.663258],
            [   0.0,         0.0,        1.0    ]
        ], dtype=np.float32)
        self.dist_coeffs = np.array(
            [ 1.40268474e-01, -5.82374172e-01,
             -9.01385729e-04,  1.31500156e-02, 
              1.39051828e+00 ], 
            dtype=np.float32
        )
        self.marker_length = 0.106
        self.reference_marker_id = 0
        self.reference_marker_position = None
        
        
#수정
    def run(self):
        """ROS2 실행"""
        print("ROS2NodeThread started")  # 디버깅용 로그
        rclpy.init()
        self.node = rclpy.create_node('gui_node')
        self.executor = MultiThreadedExecutor()
        self.executor.add_node(self.node)

        # 이미지 구독 설정
        self.subscription = self.node.create_subscription(
            CompressedImage,
            'rgb_image/global_image',
            self.listener_callback_rgb,
            10
        )

        # 로컬 카메라 토픽 구독
        self.node.create_subscription(
            CompressedImage,
            'rgb_image/local_image',
            self.listener_callback_local_rgb,
            10
        )
        
        self.conveyor_pub = self.node.create_publisher(
            String,
            'conveyor_belt_status',
            10
        )

        while self.running and rclpy.ok():
            rclpy.spin_once(self.node, timeout_sec=0.1)

        # 노드 종료
        if self.node:
            self.node.destroy_node()
        rclpy.shutdown()
        

    def listener_callback_rgb(self, msg):
        """글로벌 카메라 이미지 수신 콜백 -> ArUco 검출(위치+회전) -> QImage 변환 -> 시그널 emit"""
        
        np_arr = np.frombuffer(msg.data, np.uint8)
        image_np = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)  # BGR
        
        # 1) 그레이스케일 변환
        gray = cv2.cvtColor(image_np, cv2.COLOR_BGR2GRAY)
        
        # 2) 마커 검출
        corners, ids, _ = aruco.detectMarkers(gray, self.aruco_dict, parameters=self.aruco_params)
        
        if ids is not None:
            # 마커 테두리 그리기
            aruco.drawDetectedMarkers(image_np, corners, ids)
            # 포즈 추정
            rvecs, tvecs, _ = aruco.estimatePoseSingleMarkers(
                corners, self.marker_length,
                self.camera_matrix, self.dist_coeffs
            )

            for i, (rvec, tvec) in enumerate(zip(rvecs, tvecs)):
                marker_id = ids[i][0]

                # 축 그리기 (drawAxis)
                aruco.drawAxis(image_np, self.camera_matrix, self.dist_coeffs, rvec, tvec, 0.1)
                
                # 회전 벡터 -> 각도로 변환
                # rvec.shape: (1,3), 따라서 np.rad2deg(rvec)도 (1,3) => [ [rx, ry, rz] ]
                rvec_deg = np.rad2deg(rvec)[0]  # [rx, ry, rz] 형태
                
                # 기준 마커 처리
                if marker_id == self.reference_marker_id:
                    self.reference_marker_position = tvec[0]    # 기준 마커의 위치
                    self.reference_marker_rotation = rvec_deg   # 기준 마커의 회전(각도)
                    id_text = f"ID: {marker_id} (Reference)"
                    position_text = "X: 0.00, Y: 0.00, Z: 0.00"
                    rotation_text = "RX: 0.00, RY: 0.00, RZ: 0.00"
                else:
                    if self.reference_marker_position is not None:
                        # 상대 위치, 상대 회전 계산
                        relative_position = self.reference_marker_position - tvec[0]
                        relative_rotation = self.reference_marker_rotation - rvec_deg
                        
                        id_text = f"ID: {marker_id}"
                        position_text = (f"X: {relative_position[0]:.2f}, "
                                        f"Y: {relative_position[1]:.2f}, "
                                        f"Z: {relative_position[2]:.2f}")
                        rotation_text = (f"RX: {relative_rotation[0]:.2f}, "
                                        f"RY: {relative_rotation[1]:.2f}, "
                                        f"RZ: {relative_rotation[2]:.2f}")
                    else:
                        id_text = f"ID: {marker_id}"
                        position_text = "X: - , Y: - , Z: -"
                        rotation_text = "RX: - , RY: - , RZ: -"
                
                # OpenCV 화면에 텍스트 표시
                corner_x = int(corners[i][0][0][0])
                corner_y = int(corners[i][0][0][1])
                
                cv2.putText(image_np, id_text, (corner_x, corner_y),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                cv2.putText(image_np, position_text, (corner_x, corner_y + 20),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                cv2.putText(image_np, rotation_text, (corner_x, corner_y + 40),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        
        # 3) QImage로 변환 -> Qt로 보냄
        image_rgb = cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB)
        height, width, channel = image_rgb.shape
        bytes_per_line = channel * width

        q_image = QImage(
            image_rgb.data, width, height,
            bytes_per_line, QImage.Format_RGB888
        )
        self.ros_image_signal.emit(q_image)

    def listener_callback_local_rgb(self, msg):
        print("Local camera callback triggered")
        """로컬 카메라 이미지 수신 콜백"""
        np_arr = np.frombuffer(msg.data, np.uint8)
        image_np = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        # image_np = cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB)

        height, width, channel = image_np.shape
        bytes_per_line = 3 * width
        q_image = QImage(image_np.data, width, height, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        self.ros_local_image_signal.emit(q_image)


    def stop(self):
        self.running = False

    # def publish_message(self, topic, message):
    #     """ROS2 메시지를 발행"""
    #     if self.node:
    #         publisher = self.node.create_publisher(String, topic, 10)
    #         publisher.publish(String(data=message))


############################## 로그인 관련 #################################
class Login(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('시스템 로그인')
        self.resize(450, 350)  # 초기 창 크기
        self.setMinimumSize(300, 250)  # 최소 창 크기 설정
        self.setStyleSheet("background-color: #F5F6F7;")
        
        # 창을 화면에 배치
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

        layout = QVBoxLayout()
        layout.setContentsMargins(30, 30, 30, 30)
        layout.setSpacing(20)

        layout.addStretch(1)  # 상단 여백

        # 로그인 제목
        title_label = QLabel('로그인')
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setFont(QFont('Arial', 24, QFont.Bold))
        layout.addWidget(title_label)

        layout.addStretch(1)  # 제목과 입력 필드 사이 여백

        # 아이디 입력
        self.id_input = QLineEdit()
        self.id_input.setPlaceholderText("아이디")
        self.id_input.setStyleSheet("""
            QLineEdit {
                border: 1px solid #DADADA;
                border-radius: 5px;
                padding: 10px;
                font-size: 16px;
                background-color: white;
            }
        """)
        layout.addWidget(self.id_input)

        # 비밀번호 입력
        self.pw_input = QLineEdit()
        self.pw_input.setPlaceholderText("비밀번호")
        self.pw_input.setEchoMode(QLineEdit.Password)
        self.pw_input.setStyleSheet("""
            QLineEdit {
                border: 1px solid #DADADA;
                border-radius: 5px;
                padding: 10px;
                font-size: 16px;
                background-color: white;
            }
        """)
        layout.addWidget(self.pw_input)

        layout.addStretch(1)  # 입력 필드와 버튼 사이 여백

        # 로그인 버튼
        login_button = QPushButton("로그인")
        login_button.setStyleSheet("""
            QPushButton {
                background-color: #1E90FF;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 15px;
                font-size: 18px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5ACCFF;
            }
        """)
        login_button.clicked.connect(self.login)
        layout.addWidget(login_button)

        layout.addStretch(1)  # 하단 여백

        self.setLayout(layout)

    def login(self):
        # 로그인 로직은 그대로 유지
        login_id = "c5"
        login_pw = "rokey"
    
        user_id = self.id_input.text()
        user_pw = self.pw_input.text()

        if user_id == login_id and user_pw == login_pw:
            QMessageBox.information(self, "로그인 성공", "시스템 접속")
            self.open_main_window()
        else:
            QMessageBox.warning(self, "로그인 실패", "아이디 또는 비밀번호가 올바르지 않습니다.")

    def open_main_window(self):
        self.main_window = MainApp()  # MainApp을 직접 호출
        self.main_window.show()
        self.close()

############################## 로그인 관련 #################################


class MainApp(QWidget):  # MainApp 클래스 정의
    def __init__(self):
        super().__init__()
        self.initUI()
        
        #USB
        self.usb_thread = USBMonitorThread()
        # 1) 기존 로그 표시 연결
        self.usb_thread.usb_event_signal.connect(self.log_message)
        # 2) USB 이벤트 추가 처리 연결
        self.usb_thread.usb_event_signal.connect(self.handle_usb_event)

        print("USBMonitorThread signal connected to log_message and handle_usb_event")
        self.usb_thread.start()

    
        
        #타이머
        self.timer = QTimer(self)  # QTimer 객체 생성
        self.timer.timeout.connect(self.update_timer)  # 타이머 연결
        self.time_count = 0  # 타이머 값
        self.running = False  # 타이머 실행 상태 확인
        
        
        # ROS2 노드 스레드 생성 및 시작
        self.ros_thread = ROS2NodeThread()
        #수정   
        self.ros_thread.ros_image_signal.connect(self.update_global_camera)
        self.ros_thread.ros_local_image_signal.connect(self.update_local_camera)

        #추가
        print("Connecting ros_image_signal to update_global_camera")
        self.ros_thread.start()
        print("ROS2NodeThread started")
    #USB
    def closeEvent(self, event):
        """창 닫힐 때 스레드 종료"""
        self.usb_thread.stop()
        self.usb_thread.wait()
        super().closeEvent(event)

    def log_message(self, message):
        if not hasattr(self, 'logging_area') or self.logging_area is None:
            return
        self.logging_area.append(message)
        self.logging_area.verticalScrollBar().setValue(self.logging_area.verticalScrollBar().maximum())
        QtCore.QCoreApplication.processEvents()  # 강제 UI 업데이트




    def initUI(self):
        # 메인 애플리케이션 창 설정
        self.setWindowTitle('Frame')
        self.resize(896, 780)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.setFont(font)

        # UI 요소 설정
        #글로벌카메라
        self.label_global_cam = QtWidgets.QLabel(self)
        self.label_global_cam.setGeometry(QtCore.QRect(20, 40, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_global_cam.setFont(font)
        self.label_global_cam.setObjectName("label_global_cam")

        #로컬카메라
        self.label_local_cam = QtWidgets.QLabel(self)
        self.label_local_cam.setGeometry(QtCore.QRect(20, 380, 311, 31))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_local_cam.setFont(font)
        self.label_local_cam.setObjectName("label_local_cam")

        # 글로벌 카메라 리스트 뷰
        self.verticalLayoutWidget = QtWidgets.QWidget(self)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 80, 351, 261))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        
        #추가
        self.global_camera_label = QLabel(self)
        self.global_camera_label.setGeometry(QtCore.QRect(20, 80, 351, 261))  # 흰 창 위치
        self.global_camera_label.setStyleSheet("background-color: black;")  # 배경색 설정
        self.global_camera_label.setAlignment(Qt.AlignCenter)  # 중앙 정렬
        
        
         # 로컬 카메라 QLabel
        self.local_camera_label = QLabel(self)
        self.local_camera_label.setGeometry(QtCore.QRect(20, 420, 351, 261))
        self.local_camera_label.setStyleSheet("background-color: black;")
        self.local_camera_label.setAlignment(Qt.AlignCenter)
        
        
        self.GLOBALCAMERA = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.GLOBALCAMERA.setContentsMargins(0, 0, 0, 0)
        self.GLOBALCAMERA.setObjectName("GLOBALCAMERA")
        
        
        self.listView_2 = QtWidgets.QListView(self.verticalLayoutWidget)
        self.listView_2.setObjectName("listView_2")
        self.GLOBALCAMERA.addWidget(self.listView_2)
        
        # 로봇 카메라 스냅샷 리스트 뷰
        #self.verticalLayoutWidget_2 = QtWidgets.QWidget(self)
        #self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(20, 420, 351, 261))
        #self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        
        
        #self.ROBOTCAMERASNAPSHOT = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        #self.ROBOTCAMERASNAPSHOT.setContentsMargins(0, 0, 0, 0)
        #self.ROBOTCAMERASNAPSHOT.setObjectName("ROBOTCAMERASNAPSHOT")
        
        
        #self.listView_3 = QtWidgets.QListView(self.verticalLayoutWidget_2)
        #self.listView_3.setObjectName("listView_3")
        #self.ROBOTCAMERASNAPSHOT.addWidget(self.listView_3)
        
        # 설정 그룹 박스
        self.groupBox = QtWidgets.QGroupBox(self)
        self.groupBox.setGeometry(QtCore.QRect(410, 40, 451, 91))
        self.groupBox.setObjectName("groupBox")
        
        
        self.widget = QtWidgets.QWidget(self.groupBox)
        self.widget.setGeometry(QtCore.QRect(20, 40, 411, 41))
        self.widget.setObjectName("widget")
        
        # 색상 설정을 위한 스핀 박스
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        
        # RED 레이블과 스핀 박스
        self.label_3 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        
        
        self.RED = QtWidgets.QSpinBox(self.widget)
        self.RED.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.RED.setMaximum(2)
        self.RED.setProperty("value", 0)
        self.RED.setDisplayIntegerBase(10)
        self.RED.setObjectName("RED")
        self.horizontalLayout_2.addWidget(self.RED)
        
        # BLUE 레이블과 스핀 박스
        self.label_4 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_2.addWidget(self.label_4)
        
        self.BLUE = QtWidgets.QSpinBox(self.widget)
        self.BLUE.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.BLUE.setMaximum(2)
        self.BLUE.setProperty("value", 0)
        self.BLUE.setDisplayIntegerBase(10)
        self.BLUE.setObjectName("BLUE")
        self.horizontalLayout_2.addWidget(self.BLUE)
        
        # GOAL 레이블과 스핀 박스
        self.label_5 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_2.addWidget(self.label_5)
        
        
        self.GOAL = QtWidgets.QSpinBox(self.widget)
        self.GOAL.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.GOAL.setMaximum(3)
        self.GOAL.setProperty("value", 0)
        self.GOAL.setDisplayIntegerBase(10)
        self.GOAL.setObjectName("GOAL")
        self.horizontalLayout_2.addWidget(self.GOAL)

        # 컨베이어 벨트 제어 버튼
        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setGeometry(QtCore.QRect(410, 280, 451, 101))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(27)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        
        self.pushButton_2 = QtWidgets.QPushButton(self)
        self.pushButton_2.setGeometry(QtCore.QRect(410, 140, 101, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        
        self.pushButton_3 = QtWidgets.QPushButton(self)
        self.pushButton_3.setGeometry(QtCore.QRect(530, 140, 101, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        
        self.pushButton_4 = QtWidgets.QPushButton(self)
        self.pushButton_4.setGeometry(QtCore.QRect(410, 210, 101, 51))
        self.pushButton_4.setObjectName("pushButton_4")
        
        self.pushButton_5 = QtWidgets.QPushButton(self)
        self.pushButton_5.setGeometry(QtCore.QRect(530, 210, 101, 51))
        self.pushButton_5.setObjectName("pushButton_5")
        
        # 로그 및 버튼 관련 레이블
        self.label_6 = QtWidgets.QLabel(self)
        self.label_6.setGeometry(QtCore.QRect(410, 390, 91, 31))
        self.label_6.setObjectName("label_6")
        
        # 수직 분리선
        self.line = QtWidgets.QFrame(self)
        self.line.setGeometry(QtCore.QRect(380, 50, 20, 651))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        
        # 수평 분리선
        self.line_2 = QtWidgets.QFrame(self)
        self.line_2.setGeometry(QtCore.QRect(20, 700, 851, 21))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        
        # 데이터 저장 버튼
        self.pushButton_6 = QtWidgets.QPushButton(self)
        self.pushButton_6.setGeometry(QtCore.QRect(410, 670, 461, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        
        # 컨베이어 제어 관련 그룹 박스
        self.groupBox_2 = QtWidgets.QGroupBox(self)
        self.groupBox_2.setGeometry(QtCore.QRect(650, 140, 211, 121))
        self.groupBox_2.setObjectName("groupBox_2")

        # 컨베이어 벨트 앞쪽 이동 버튼
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_7.setGeometry(QtCore.QRect(110, 40, 89, 25))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.move_conveyor)

        # 컨베이어 벨트 정지 버튼
        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_8.setGeometry(QtCore.QRect(110, 80, 89, 25))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.stop_conveyor)

        # 이동 거리 설정을 위한 스핀 박스
        self.RED_2 = QtWidgets.QSpinBox(self.groupBox_2)
        self.RED_2.setGeometry(QtCore.QRect(20, 60, 71, 31))
        self.RED_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.RED_2.setMinimum(10)
        self.RED_2.setMaximum(1000)
        self.RED_2.setSingleStep(10)
        self.RED_2.setProperty("value", 10)
        self.RED_2.setDisplayIntegerBase(10)
        self.RED_2.setObjectName("DIST")
    
        # 수직 분리선
        self.line_3 = QtWidgets.QFrame(self)
        self.line_3.setGeometry(QtCore.QRect(380, 720, 20, 41))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        
        #로그표시 공간 분리 및 스크롤 바
        self.splitter = QtWidgets.QSplitter(self)
        self.splitter.setGeometry(QtCore.QRect(410, 430, 461, 231))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        
        # 로그 표시를 위한 QTextEdit 추가
        self.logging_area = QtWidgets.QTextEdit(self)
        self.logging_area.setGeometry(QtCore.QRect(410, 430, 461, 231))
        self.logging_area.setReadOnly(True)  # 읽기 전용으로 설정
        self.logging_area.setObjectName("logging_area")
        
        self.verticalScrollBar = QtWidgets.QScrollBar(self.splitter)
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        
         # 추가적인 리스트 뷰 및 버튼
        self.splitter_3 = QtWidgets.QSplitter(self)
        self.splitter_3.setGeometry(QtCore.QRect(410, 730, 471, 31))
        self.splitter_3.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_3.setObjectName("splitter_3")
        
        self.label_7 = QtWidgets.QLabel(self.splitter_3)
        self.label_7.setObjectName("label_7")
        
        self.splitter_2 = QtWidgets.QSplitter(self.splitter_3)
        self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_2.setObjectName("splitter_2")
        
        self.text_input = QtWidgets.QLineEdit(self.splitter_2)
        self.text_input.setObjectName("text_input")
        self.text_input.setPlaceholderText("Admin Email Input Field")
        
        self.pushButton_9 = QtWidgets.QPushButton(self.splitter_2)
        self.pushButton_9.setObjectName("pushButton_9")
        
        # LCD 디스플레이
        self.splitter_4 = QtWidgets.QSplitter(self)
        self.splitter_4.setGeometry(QtCore.QRect(40, 720, 321, 41))
        self.splitter_4.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_4.setObjectName("splitter_4")
        
        self.label_8 = QtWidgets.QLabel(self.splitter_4)
        self.label_8.setObjectName("label_8")
        
        self.lcdNumber = QtWidgets.QLCDNumber(self.splitter_4)
        self.lcdNumber.setObjectName("lcdNumber")
        
        # e-mail send button
        self.pushButton_9.clicked.connect(self.send_email)


        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self, Frame):
        _translate = QtCore.QCoreApplication.translate
        Frame.setWindowTitle(_translate("Frame", "Frame"))
        self.label_global_cam.setText(_translate("Frame", "GLOBAL CAMERA"))
        self.label_local_cam.setText(_translate("Frame", "ROBOT CAMERA SNAPSHOT"))
        self.groupBox.setTitle(_translate("Frame", "SETTING"))
        self.label_3.setText(_translate("Frame", "RED"))
        self.label_4.setText(_translate("Frame", "BLUE"))
        self.label_5.setText(_translate("Frame", "GOAL"))
        self.pushButton.setText(_translate("Frame", "EMERGENCY STOP"))
        self.pushButton_2.setText(_translate("Frame", "START"))
        self.pushButton_3.setText(_translate("Frame", "PAUSE"))
        self.pushButton_4.setText(_translate("Frame", "RESUME"))
        self.pushButton_5.setText(_translate("Frame", "RESET"))
        self.label_6.setText(_translate("Frame", "LOGGING"))
        self.pushButton_6.setText(_translate("Frame", "DATA SAVE"))
        self.pushButton_6.clicked.connect(self.capture_screen)  # 버튼 클릭 시 화면 캡처 함수 연결
        self.groupBox_2.setTitle(_translate("Frame", "CONVEYOR CONTROL(cm)"))
        self.pushButton_7.setText(_translate("Frame", "MOVE"))
        self.pushButton_8.setText(_translate("Frame", "STOP"))
        self.label_7.setText(_translate("Frame", "E-MAIL"))
        self.pushButton_9.setText(_translate("Frame", "SEND"))
        self.label_8.setText(_translate("Frame", "TIMER"))

        "타이머 추가"

        # START 버튼
        self.start_button = QPushButton("START", self)
        self.start_button.setGeometry(410, 140, 101, 51)
        self.start_button.clicked.connect(self.start_timer)

        # STOP 버튼
        self.stop_button = QPushButton("PAUSE", self)
        self.stop_button.setGeometry(530, 140, 101, 51)
        self.stop_button.clicked.connect(self.stop_timer)

        # RESUME 버튼
        self.resume_button = QPushButton("RESUME", self)
        self.resume_button.setGeometry(410, 210, 101, 51)
        self.resume_button.clicked.connect(self.resume_timer)

        # RESET 버튼
        self.reset_button = QPushButton("RESET", self)
        self.reset_button.setGeometry(530, 210, 101, 51)
        self.reset_button.clicked.connect(self.reset_timer)

        # EMERGENCY STOP 버튼
        self.emergency_button = QPushButton("EMERGENCY STOP", self)
        self.emergency_button.setGeometry(410, 280, 451, 101)
        self.emergency_button.clicked.connect(self.emergency_stop)
        
        self.groupBox_2.setTitle(_translate("Frame", "CONVEYOR CONTROL(cm)"))
        self.pushButton_7.setText(_translate("Frame", "FORWARD"))
        self.pushButton_8.setText(_translate("Frame", "STOP"))
        self.label_7.setText(_translate("Frame", "E-MAIL"))
        self.pushButton_9.setText(_translate("Frame", "SEND"))
        self.label_8.setText(_translate("Frame", "TIMER"))
    
    def update_timer(self):
        self.time_count += 1  # 시간 카운트 증가
        minutes = self.time_count // 60  # 분 계산 (몫)
        seconds = self.time_count % 60   # 초 계산 (나머지)
        time_format = f"{minutes:02}:{seconds:02}"  # "분:초" 형식으로 설정
        self.lcdNumber.display(time_format)  # LCD에 시간 표시

    # def update_timer(self):
    #     self.time_count += 1
    #     self.lcdNumber.display(self.time_count)

    def start_timer(self):
        if not self.running:
            self.timer.start(1000)
            self.running = True
            self.log_message("START 버튼이 눌렸습니다.")

    def stop_timer(self):
        if self.running:
            self.timer.stop()
            self.running = False
            self.log_message("PAUSE 버튼이 눌렸습니다.")

    def resume_timer(self):
        if not self.running:
            self.timer.start(1000)
            self.running = True
            self.log_message("RESUME 버튼이 눌렸습니다.")

    def reset_timer(self):
        self.timer.stop()
        self.time_count = 0
        self.lcdNumber.display(0)
        self.running = False
        self.log_message("RESET 버튼이 눌렸습니다.")

    def emergency_stop(self):
        self.timer.stop()
        self.time_count = 0
        self.lcdNumber.display(0)
        self.running = False
        self.log_message("EMERGENCY STOP 버튼이 눌렸습니다.")
        QMessageBox.critical(self, "긴급 정지", "긴급 정지 버튼이 눌렸습니다!")

    def move_conveyor(self):
        distance = self.RED_2.value()  # 사용자 입력 거리
        message = f"F{distance}"  # 포워드 명령
        self.ros_thread.conveyor_pub.publish(String(data=message))  # 메시지 발행
        self.log_message(f"컨베이어가 {distance}cm 앞으로 이동합니다.")  # 로그 메시지 추가

    def stop_conveyor(self):
        message = "STOP"  # 멈춤 명령
        self.ros_thread.conveyor_pub.publish(String(data=message))  # 멈춤 명령 발행
        self.log_message("컨베이어가 멈추는 명령이 전송되었습니다.")  # 로그 메시지 추가

    def log_message(self, message):
        """로그 메시지를 표시하는 메서드"""
        self.logging_area.append(message)  # QTextEdit에 메시지 추가

    def capture_screen(self):
            # 저장 경로 설정
            save_path = "/home/jaeheyoung/Pictures"
            if not os.path.exists(save_path):
                os.makedirs(save_path)

            # 파일 이름 생성
            filename = os.path.join(save_path, "screenshot_drive3_system.png")

            try:
                # gnome-screenshot 명령어 실행
                subprocess.run(["gnome-screenshot", "-f", filename], check=True)
                print(f"스크린샷 저장 완료: {filename}")
                QMessageBox.information(None, "저장 완료", f"스크린샷이 저장되었습니다:\n{filename}")
            except FileNotFoundError:
                print("gnome-screenshot이 설치되지 않았습니다.")
                QMessageBox.critical(None, "캡처 실패", "gnome-screenshot 명령이 설치되지 않았습니다.")
            except subprocess.CalledProcessError as e:
                print(f"gnome-screenshot 실행 실패: {e}")
                QMessageBox.critical(None, "캡처 실패", f"스크린샷 캡처 중 오류 발생:\n{e}")
                
    def update_global_camera(self, q_image):
        """QImage를 QLabel에 업데이트"""
        pixmap = QPixmap.fromImage(q_image)
        self.global_camera_label.setPixmap(pixmap)
        self.global_camera_label.setScaledContents(True)  # QLabel에 맞게 이미지 조정
                
    def update_local_camera(self, q_image):
        """로컬 카메라 이미지를 QLabel에 업데이트"""
        pixmap = QPixmap.fromImage(q_image)
        self.local_camera_label.setPixmap(pixmap)
        self.local_camera_label.setScaledContents(True)            
                
                
    def send_email(self):
        recipient_email = self.text_input.text()  # Admin Email Input Field에서 입력받은 이메일
        if not recipient_email:
            self.log_message("이메일 입력 오류: 이메일을 입력하세요!")
            return

        # 메일 설정
        sender_email = "mymoomy@naver.com"  # 발신자 이메일
        sender_password = "qmffhrmdyd"      # 앱 비밀번호
        subject = "ISSUE 발생"
        body = "컨베이어 상황 GUI 보내드립니다"

        # 첨부파일 경로
        file_path = "/home/jaeheyoung/Pictures/screenshot_wayland.png"

        # 이메일 생성
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = recipient_email
        msg['Subject'] = subject

        # 본문 추가
        msg.attach(MIMEText(body, 'plain'))

        # 첨부파일 추가
        try:
            with open(file_path, "rb") as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f'attachment; filename={os.path.basename(file_path)}'
            )
            msg.attach(part)
        except FileNotFoundError:
            self.log_message(f"파일 오류: 파일을 찾을 수 없습니다: {file_path}")
            return

        # SMTP 서버 연결 및 이메일 전송
        try:
            server = smtplib.SMTP('smtp.naver.com', 587)  # NAVER SMTP 서버 및 포트
            server.starttls()  # 보안 연결 시작
            server.login(sender_email, sender_password)  # 로그인
            server.send_message(msg)  # 이메일 전송
            server.quit()

            self.log_message(f"메일 전송 완료: {recipient_email}로 메일이 성공적으로 전송되었습니다.")
        except Exception as e:
            self.log_message(f"메일 전송 실패: 메일 전송 중 오류 발생: {str(e)}")

    def listener_callback_rgb(self, msg):
        np_arr = np.frombuffer(msg.data, np.uint8)
        image_np = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)  # BGR 이미지 디코딩
        image_np = cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB)  # RGB로 변환

        # OpenCV 이미지 -> QImage 변환
        height, width, channel = image_np.shape
        bytes_per_line = 3 * width
        q_image = QImage(image_np.data, width, height, bytes_per_line, QImage.Format_RGB888)

        self.ros_image_signal.emit(q_image)  # QImage를 시그널로 보냄
                
                
    def stop(self):
        """스레드를 안전하게 종료"""
        self.running = False  # while 루프 중단
        if self.node:
            self.node.destroy_node()  # ROS2 노드 종료
        rclpy.shutdown()  # ROS2 시스템 종료

    def closeEvent(self, event):
        """창 닫힐 때 ROS2 스레드 종료"""
        self.ros_thread.stop()
        self.ros_thread.wait()
        event.accept()
        
    def handle_usb_event(self, message: str):
        """
        USB 이벤트를 처리하는 슬롯
        1) USB 빠짐 인식 -> 스크린샷 + 이메일 전송
        2) USB 연결 인식 -> 특별히 안 함 (필요하다면 추가)
        """
        # message == "USB is connected" or "USB is not connected"
        if message == "USB is not connected":
            # 1) 화면 캡처
            # saved_file = self.auto_capture_screen()  
            # 2) 로그 남기기
            self.log_message("USB Disconnect detected")

            # 3) 이메일 전송
            #   - 메일 받을 사람: self.text_input.text() (GUI 하단 입력란)
            recipient = self.text_input.text().strip()
            if not recipient:
                self.log_message("이메일 전송 실패: 수신자 이메일이 비어있습니다.")
                return
            
            # result = self.auto_send_email(recipient, saved_file)
            result = self.auto_send_email(recipient)
            if result:
                self.log_message("USB Disconnect -> 이메일 전송")
            else:
                self.log_message("USB Disconnect -> 이메일 전송 실패")
                
        
    
    # def auto_capture_screen(self):
    #     """
    #     USB가 빠지면 자동으로 스크린샷을 저장하는 함수 (팝업 없이 동작)
    #     성공 시 저장된 파일 경로를 반환, 실패 시 None 반환
    #     """
    #     save_path = "/home/jaeheyoung/Pictures"
    #     if not os.path.exists(save_path):
    #         os.makedirs(save_path)

    #     filename = os.path.join(save_path, "screenshot_drive3_system.png")

    #     try:
    #         subprocess.run(["gnome-screenshot", "-f", filename], check=True)
    #         print(f"스크린샷 저장 완료: {filename}")
    #         # 별도의 팝업 없이 로그만 찍기
    #         return filename
    #     except FileNotFoundError:
    #         print("gnome-screenshot이 설치되지 않았습니다.")
    #         return None
    #     except subprocess.CalledProcessError as e:
    #         print(f"gnome-screenshot 실행 실패: {e}")
    #         return None


    # def auto_send_email(self, recipient_email, file_path):
    def auto_send_email(self, recipient_email):
        """
        USB가 빠지면 자동으로 이메일을 전송하는 함수
        성공 시 True, 실패 시 False 반환
        """
        if not recipient_email:
            return False

        sender_email = "mymoomy@naver.com"  # 발신자
        sender_password = "qmffhrmdyd"      # 앱 비밀번호
        subject = "USB Disconnected - 자동 알림"
        # body = "USB가 분리되었습니다. 관련 스크린샷 첨부, 확인 요청 드립니다."
        body = "USB가 분리되었습니다. 확인 부탁드립니다."

        # if not os.path.exists(file_path):
        #     print(f"전송 실패: 첨부파일이 없습니다. path={file_path}")
        #     return False

        # 이메일 생성
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = recipient_email
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))

        # # 첨부파일
        # try:
        #     with open(file_path, "rb") as attachment:
        #         part = MIMEBase('application', 'octet-stream')
        #         part.set_payload(attachment.read())
        #     encoders.encode_base64(part)
        #     part.add_header('Content-Disposition',
        #                     f'attachment; filename={os.path.basename(file_path)}')
        #     msg.attach(part)
        # except FileNotFoundError:
        #     print(f"첨부파일 오류: {file_path} 없음")
        #     return False

        # SMTP 전송
        try:
            server = smtplib.SMTP('smtp.naver.com', 587)
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(msg)
            server.quit()
            return True
        except Exception as e:
            print(f"이메일 전송 실패: {str(e)}")
            return False

                
                
    
        
        
        
        
class USBMonitorThread(QThread):
    usb_event_signal = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.context = pyudev.Context()
        self.monitor = pyudev.Monitor.from_netlink(self.context)
        self.monitor.filter_by(subsystem='usb')
        self.running = True
        self.tracked_devices = set()  # 연결된 장치를 추적하기 위한 집합
        self.target_vid = "2341"  # Arduino Vendor ID
        self.target_pid = "0043"  # Arduino Product ID
        self.initialize_usb_state()  # USB 상태 초기화

    def initialize_usb_state(self):
        """현재 USB 상태를 초기화"""
        for device in self.context.list_devices(subsystem='usb'):
            vendor_id = device.properties.get('ID_VENDOR_ID', '')
            product_id = device.properties.get('ID_MODEL_ID', '')

            if vendor_id == self.target_vid and product_id == self.target_pid:
                self.tracked_devices.add((vendor_id, product_id))
                self.usb_event_signal.emit("USB is connected")
                print("INIT EVENT: USB is connected")
                return  # 초기 연결 상태가 확인되면 종료

        # USB가 연결되지 않은 상태
        self.usb_event_signal.emit("USB is not connected")
        print("INIT EVENT: USB is not connected")

    def run(self):
        while self.running:
            try:
                device = self.monitor.poll(timeout=1)
                if device:
                    action = device.action
                    vendor_id = device.properties.get('ID_VENDOR_ID', '')
                    product_id = device.properties.get('ID_MODEL_ID', '')

                    if action == "add" and vendor_id == self.target_vid and product_id == self.target_pid:
                        if (vendor_id, product_id) not in self.tracked_devices:
                            self.tracked_devices.add((vendor_id, product_id))
                            self.usb_event_signal.emit("USB is connected")
                            print("ADD EVENT: USB is connected")

                    elif action == "remove":
                        if (self.target_vid, self.target_pid) in self.tracked_devices:
                            self.tracked_devices.remove((self.target_vid, self.target_pid))
                            self.usb_event_signal.emit("USB is not connected")
                            print("REMOVE EVENT: USB is not connected")
            except Exception as e:
                print(f"Error in USB monitoring: {e}")

    def stop(self):
        self.running = False






if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    login_window = Login()  # 로그인 화면 열기
    # login_window = MainApp()
    login_window.show()
    sys.exit(app.exec_())
    
